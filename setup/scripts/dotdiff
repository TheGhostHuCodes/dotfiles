#!/usr/bin/env bash

# dotdiff compares currently deployed system dotfiles with the canonical copies
# that are stored in the dotfiles repository. Local dotfiles may accidentally
# be changed on the local system prior to deployment of an ansible playbook.
# dotdiff allows us to compare these files before deployment and merge any
# local changes back into the repo before accidentally overwriting them.

pairs=(
  "../configuration/fish/functions/fish_user_key_bindings.fish:$HOME/.config/fish/functions/fish_user_key_bindings.fish"
  "../configuration/idea/ideavimrc:$HOME/.ideavimrc"
  "../configuration/inputrc:$HOME/.inputrc"
  "../configuration/neovim/init.vim:$HOME/.config/nvim/init.vim"
  "../configuration/neovim/spell/en.utf-8.add:$HOME/.config/nvim/spell/en.utf-8.add"
  "../configuration/zsh/zshrc:$HOME/.zshrc"
  "../configuration/vim/vimrc:$HOME/.vimrc"
  "../templates/tmux/tmux.conf.j2:$HOME/.tmux.conf"
  "../templates/tmux/tmux-osx.conf.j2:$HOME/.tmux-osx.conf"
  "../templates/leiningen/profiles.clj.j2:$HOME/.lein/profiles.clj"
  "../templates/vscode/settings.json.j2:$HOME/Library/Application Support/Code/User/settings.json"
)

# Ensure script is executed relative to the script directory.
cd "$(dirname "$0")" || exit 1

verbose=false
merge=false
while getopts ":hvm" opt; do
  case ${opt} in
    h )
      echo "Usage:"
      echo "    dotdiff -h          Display this help message."
      echo "    dotdiff -v          Display verbose logging."
      echo "    dotdiff -m          Merge files using meld."
      exit 0
      ;;
    v ) verbose=true
      ;;
    m ) merge=true
      ;;
    \? )
      echo  "Invalid Operation: -$OPTARG" 1>&2
      exit 1
      ;;
  esac
done

for i in "${pairs[@]}"
do
  # Read each pair into its own array, splitting on colon.
  IFS=':' read -ra pair <<< "$i"
  fst="${pair[0]}"
  snd="${pair[1]}"
  if cmp --quiet "$fst" "$snd"; then
    if [ "$verbose" = true ] ; then
      echo "Comparing $fst to $snd"
      printf "FILES UNCHANGED\\n\\n"
    fi
  else
    echo "Comparing $fst to $snd"
    printf "#%.0s" {1..80}
    printf "\\n\\n"
    colordiff -u "$fst" "$snd"
    printf "\\n"
    printf "#%.0s" {1..80}
    printf "\\n"
    if [ "$merge" = true ] ; then
      echo "Merging $fst into $snd"
      meld "$fst" "$snd"
    fi
  fi
done
